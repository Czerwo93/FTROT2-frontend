




INSERT INTO USER_DETAILS(EMAIL,JOINED_AT, PICTURE_URL)
VALUES ('TEST1@GMAIL.COM','2020-11-01','www.test.com'),
       ('TEST2@GMAIL.COM', '2020-11-01','www.test.com'),
       ('TEST3@GMAIL.COM', '2020-11-01','www.test.com'),
       ('TEST4@GMAIL.COM', '2020-11-01','www.test.com'),
       ('TEST5@GMAIL.COM', '2020-11-01','www.test.com');

INSERT INTO TEAM(NAME)
VALUES ( 'DLSC1');


INSERT INTO APPLICATION_USER (APPLICATION_USE_ROLE, IS_ACCOUNT_NON_EXPIRED, IS_ACCOUNT_NON_LOCKED,
                             IS_CREDENTIALS_NON_EXPIRED, IS_ENABLED, PASSWORD, USERNAME, USER_DETAILS, TEAM_ID)
VALUES ('ENGINEER', true, true, true, true, '$2a$10$Br0/W3sngs5hdRgkGpwzt.ZyOPIHXacdbNH6TM7Ga28CF7W5MD7RC', 'user1',1L,1),
       ('ENGINEER', true, true, true, true, '$2a$10$Br0/W3sngs5hdRgkGpwzt.ZyOPIHXacdbNH6TM7Ga28CF7W5MD7RC', 'user2',2L,1),
       ('TECHNICAL_PROJECT_MANAGER', true, true, true, true,
        '$2a$10$Br0/W3sngs5hdRgkGpwzt.ZyOPIHXacdbNH6TM7Ga28CF7W5MD7RC', 'tpjm',3L,1),
       ('LEAD_ENGINEER', true, true, true, true, '$2a$10$Br0/W3sngs5hdRgkGpwzt.ZyOPIHXacdbNH6TM7Ga28CF7W5MD7RC', 'user3',4L,1),
       ('TEAM_LEADER', true, true, true, true, '$2a$10$Br0/W3sngs5hdRgkGpwzt.ZyOPIHXacdbNH6TM7Ga28CF7W5MD7RC',
        'teamleader',5L,1);

INSERT INTO WORK_PACKAGE(DESCRIPTION, NAME, ASSIGNED_TECHNICAL_PROJECT_MANAGER_ID, ASSIGNED_LEAD_ENGINEER_ID, TEAM_ID, START_DATE,DEADLINE)
VALUES ('LOREM IPSUM', 'DTNA',3,4,1,'2020-11-01','2020-12-31'),
       ('LOREM IPSUM', 'HMC',3,4,1,'2020-11-01','2020-12-31'),
       ('LOREM IPSUM', 'DAF',3,4,1,'2020-11-01','2020-12-31'),
       ('LOREM IPSUM', 'Volvo',3,4,1,'2020-11-01','2020-12-31');

INSERT INTO WEEK(USER_ID, NAME)
VALUES (1, 'CW1'),
       (2, 'CW1');

INSERT INTO DAY(DATE, DAY_NAME, WEEK_ID)
VALUES ('2020-11-01','MONDAY', 1),
    ('2020-11-01','TUESDAY', 1),
    ('2020-11-01','WEDNESDAY', 1),
    ('2020-11-01','THURSDAY', 1),
    ('2020-11-01','FRIDAY', 1),
    ('2020-11-01','MONDAY', 2),
    ('2020-11-01','TUESDAY', 2),
    ('2020-11-01','WEDNESDAY', 2),
    ('2020-11-01','THURSDAY', 2),
    ('2020-11-01','FRIDAY', 2);

INSERT INTO TASK(DESCRIPTION,DURATION, NAME, IS_IN_BACKLOG, WORK_PACKAGE_ID,STATUS,ASSIGNED_ENGINEER_ID, DAY_ID )
VALUES ('LOREM IPSUM',1, 'CAD',false, 1,'FINISHED',1,1),
       ('LOREM IPSUM',1, 'FEM',false, 1,'FINISHED',1,2),
       ('LOREM IPSUM',1, 'DRAWING',false, 1,'FINISHED',1,3),
       ('LOREM IPSUM',1, 'ASSEMBLY',false, 1,'FINISHED',1,4),
       ('LOREM IPSUM',1, 'DFMEA',false, 1,'FINISHED',1,5),
       ('LOREM IPSUM',1, 'CAD',false, 2,'FINISHED',1,1),
       ('LOREM IPSUM',1, 'FEM',false, 2,'FINISHED',1,2),
       ('LOREM IPSUM',1, 'DRAWING',false, 2,'FINISHED',1,3),
       ('LOREM IPSUM',1, 'ASSEMBLY',false, 2,'FINISHED',1,4),
       ('LOREM IPSUM',1, 'DFMEA',false, 2,'FINISHED',2,5),
       ('LOREM IPSUM',1, 'CAD',false, 3,'FINISHED',2,6),
       ('LOREM IPSUM',1, 'FEM',false, 3,'FINISHED',2,6),
       ('LOREM IPSUM',1, 'DRAWING',false,3, 'FINISHED',2,7),
       ('LOREM IPSUM',1, 'ASSEMBLY',false,3, 'FINISHED',2,7),
       ('LOREM IPSUM',1, 'DFMEA',false, 3,'FINISHED',2,8),
       ('LOREM IPSUM',1, 'CAD',false, 4,'FINISHED',2,8),
       ('LOREM IPSUM',1, 'FEM',false, 4,'FINISHED',2,9),
       ('LOREM IPSUM',1, 'DRAWING',false, 4,'FINISHED',2,9),
       ('LOREM IPSUM',1, 'ASSEMBLY',false, 4,'FINISHED',2,10),
       ('LOREM IPSUM',1, 'DFMEA',false, 4,'FINISHED',2,10);



//WORK_PACKAGE
package com.czerwo.reworktracking.ftrot.models.data;

import com.czerwo.reworktracking.ftrot.auth.ApplicationUser;
import com.czerwo.reworktracking.ftrot.models.data.Task.Task;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Entity
public class WorkPackage {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @OneToOne
    private ApplicationUser assignedTechnicalProjectManager;

    @OneToOne
    private ApplicationUser assignedLeadEngineer;

    @ManyToOne
    private Team team;

    @OneToMany(mappedBy = "workPackage")
    private Set<Task> tasks = new HashSet<>();

    public ApplicationUser getAssignedTechnicalProjectManager() {
        return assignedTechnicalProjectManager;
    }

    public void setAssignedTechnicalProjectManager(ApplicationUser assignedTechnicalProjectManager) {
        this.assignedTechnicalProjectManager = assignedTechnicalProjectManager;
    }

    public Team getTeam() {
        return team;
    }

    public void setTeam(Team team) {
        this.team = team;
    }

    public Set<Task> getTasks() {
        return tasks;
    }

    public void setTasks(Set<Task> tasks) {
        this.tasks = tasks;
    }

    public LocalDateTime getDeadline() {
        return deadline;
    }

    public void setDeadline(LocalDateTime deadline) {
        this.deadline = deadline;
    }

    private String name;

    private String description;

    private LocalDateTime startDate;

    private LocalDateTime deadline;

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }


    public ApplicationUser getAssignedLeadEngineer() {
        return assignedLeadEngineer;
    }

    public void setAssignedLeadEngineer(ApplicationUser assignedLeadEngineer) {
        this.assignedLeadEngineer = assignedLeadEngineer;
    }


    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public LocalDateTime getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDateTime startDate) {
        this.startDate = startDate;
    }
}



//WEEKpackage com.czerwo.reworktracking.ftrot.models.data;

import com.czerwo.reworktracking.ftrot.auth.ApplicationUser;
import com.czerwo.reworktracking.ftrot.models.data.Day.Day;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity
public class Week {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    private ApplicationUser user;

    @OneToMany(mappedBy = "week")
    private Set<Day> days = new HashSet<>();

    private String name;


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public ApplicationUser getUser() {
        return user;
    }

    public void setUser(ApplicationUser user) {
        this.user = user;
    }

    public Set<Day> getDays() {
        return days;
    }

    public void setDays(Set<Day> days) {
        this.days = days;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}



//userDetails
package com.czerwo.reworktracking.ftrot.models.data;

import com.czerwo.reworktracking.ftrot.auth.ApplicationUser;

import javax.persistence.*;
import java.time.LocalDate;

@Entity
public class UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long Id;

    private String email;

    private LocalDate joinedAt;

    private String pictureUrl;


    public long getId() {
        return Id;
    }

    public void setId(long id) {
        Id = id;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public LocalDate getJoinedAt() {
        return joinedAt;
    }

    public void setJoinedAt(LocalDate joinedAt) {
        this.joinedAt = joinedAt;
    }

    public String getPictureUrl() {
        return pictureUrl;
    }

    public void setPictureUrl(String pictureUrl) {
        this.pictureUrl = pictureUrl;
    }


}


//team 
package com.czerwo.reworktracking.ftrot.models.data;

import com.czerwo.reworktracking.ftrot.auth.ApplicationUser;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Entity
public class Team {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;


    @OneToOne
    private ApplicationUser teamLeader;

    @OneToMany(mappedBy = "team")
    private Set<ApplicationUser> users = new HashSet<>();

    @OneToMany(mappedBy = "team")
    private Set<WorkPackage> workPackages = new HashSet<>();

    String name;

    public ApplicationUser getTeamLeader() {
        return teamLeader;
    }

    public void setTeamLeader(ApplicationUser teamLeader) {
        this.teamLeader = teamLeader;
    }

    public Set<ApplicationUser> getUsers() {
        return users;
    }

    public void setUsers(Set<ApplicationUser> users) {
        this.users = users;
    }

    public Set<WorkPackage> getWorkPackages() {
        return workPackages;
    }

    public void setWorkPackages(Set<WorkPackage> workPackages) {
        this.workPackages = workPackages;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }


}


//task
package com.czerwo.reworktracking.ftrot.models.data.Task;

import com.czerwo.reworktracking.ftrot.auth.ApplicationUser;
import com.czerwo.reworktracking.ftrot.models.data.Day.Day;
import com.czerwo.reworktracking.ftrot.models.data.WorkPackage;

import javax.persistence.*;


@Entity
public class Task {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    private String name;

    private double duration;

    private String description;

    @ManyToOne
    private WorkPackage workPackage;

    @ManyToOne
    private Day day;

    @Enumerated(EnumType.STRING)
    private Status status;

    @OneToOne
    private ApplicationUser assignedEngineer;

    private boolean isInBacklog;

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public boolean isInBacklog() {
        return isInBacklog;
    }

    public void setInBacklog(boolean inBacklog) {
        isInBacklog = inBacklog;
    }

    public double getDuration() {
        return duration;
    }

    public void setDuration(double duration) {
        this.duration = duration;
    }

    public Day getDay() {
        return day;
    }

    public void setDay(Day day) {
        this.day = day;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public WorkPackage getWorkPackage() {
        return workPackage;
    }

    public void setWorkPackage(WorkPackage workPackage) {
        this.workPackage = workPackage;
    }


    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    public ApplicationUser getAssignedEngineer() {
        return assignedEngineer;
    }

    public void setAssignedEngineer(ApplicationUser assignedEngineer) {
        this.assignedEngineer = assignedEngineer;
    }
}


package com.czerwo.reworktracking.ftrot.models.data.Task;

public enum Status {
    FINISHED,
    IN_PROGRESS,
    NOT_STARTED;

}

package com.czerwo.reworktracking.ftrot.models.data.Day;

import com.czerwo.reworktracking.ftrot.models.data.Task.Task;
import com.czerwo.reworktracking.ftrot.models.data.Week;

import javax.persistence.*;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.Set;

@Entity
public class Day {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Enumerated(EnumType.STRING)
    private DayName dayName;

    private LocalDate date;

    @ManyToOne
    private Week week;

    @OneToMany(mappedBy = "day")
    private Set<Task> tasks = new HashSet<>();


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public Set<Task> getTasks() {
        return tasks;
    }

    public void setTasks(Set<Task> tasks) {
        this.tasks = tasks;
    }

    public Week getWeek() {
        return week;
    }

    public void setWeek(Week week) {
        this.week = week;
    }

    public DayName getDayName() {
        return dayName;
    }

    public void setDayName(DayName dayName) {
        this.dayName = dayName;
    }


}


package com.czerwo.reworktracking.ftrot.models.data.Day;

public enum DayName {
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY;
}


package com.czerwo.reworktracking.ftrot.auth;

import com.czerwo.reworktracking.ftrot.models.data.Team;
import com.czerwo.reworktracking.ftrot.security.ApplicationUserRole;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import java.util.Collection;
import java.util.Set;

@Entity
public class ApplicationUser implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private String username;
    private  String password;

    private  boolean isAccountNonExpired;
    private  boolean isAccountNonLocked;
    private  boolean isCredentialsNonExpired;
    private  boolean isEnabled;

    @ManyToOne
    private Team team;


    private UserDetails userDetails;

    @Enumerated(EnumType.STRING)
    private ApplicationUserRole applicationUseRole;


    public ApplicationUser() {
    }

    public ApplicationUser(String username,
                           String password,
                           boolean isAccountNonExpired,
                           boolean isAccountNonLocked,
                           boolean isCredentialsNonExpired,
                           boolean isEnabled) {
        this.username = username;
        this.password = password;
        this.isAccountNonExpired = isAccountNonExpired;
        this.isAccountNonLocked = isAccountNonLocked;
        this.isCredentialsNonExpired = isCredentialsNonExpired;
        this.isEnabled = isEnabled;
    }



    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {


        return applicationUseRole.getGrantedAuthorities();
    }

    public UserDetails getUserDetails() {
        return userDetails;
    }

    public void setUserDetails(UserDetails userDetails) {
        this.userDetails = userDetails;
    }

    public Team getTeam() {
        return team;
    }

    public void setTeam(Team team) {
        this.team = team;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setAccountNonExpired(boolean accountNonExpired) {
        isAccountNonExpired = accountNonExpired;
    }

    public void setAccountNonLocked(boolean accountNonLocked) {
        isAccountNonLocked = accountNonLocked;
    }

    public void setCredentialsNonExpired(boolean credentialsNonExpired) {
        isCredentialsNonExpired = credentialsNonExpired;
    }

    public void setEnabled(boolean enabled) {
        isEnabled = enabled;
    }

    public ApplicationUserRole getApplicationUseRole() {
        return applicationUseRole;
    }

    public void setApplicationUseRole(ApplicationUserRole applicationUseRole) {
        this.applicationUseRole = applicationUseRole;
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return isAccountNonExpired;
    }

    @Override
    public boolean isAccountNonLocked() {
        return isAccountNonLocked;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return isCredentialsNonExpired;
    }

    @Override
    public boolean isEnabled() {
        return isEnabled;
    }
}
